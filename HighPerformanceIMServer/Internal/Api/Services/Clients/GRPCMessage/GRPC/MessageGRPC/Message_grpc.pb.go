// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: Message.proto

package MessageGRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImMessage_SendMessageHandler_FullMethodName = "/ImMessage/SendMessageHandler"
)

// ImMessageClient is the client API for ImMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImMessageClient interface {
	// SendMessageHandler是一个RPC方法，用于发送消息
	// 参数SendMessageRequest是一个消息类型，表示包含发送消息的请求
	// 返回SendMessageResponse消息类型，表示包含发送消息的响应
	SendMessageHandler(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
}

type imMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewImMessageClient(cc grpc.ClientConnInterface) ImMessageClient {
	return &imMessageClient{cc}
}

func (c *imMessageClient) SendMessageHandler(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, ImMessage_SendMessageHandler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImMessageServer is the server API for ImMessage service.
// All implementations must embed UnimplementedImMessageServer
// for forward compatibility
type ImMessageServer interface {
	// SendMessageHandler是一个RPC方法，用于发送消息
	// 参数SendMessageRequest是一个消息类型，表示包含发送消息的请求
	// 返回SendMessageResponse消息类型，表示包含发送消息的响应
	SendMessageHandler(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	mustEmbedUnimplementedImMessageServer()
}

// UnimplementedImMessageServer must be embedded to have forward compatible implementations.
type UnimplementedImMessageServer struct {
}

func (UnimplementedImMessageServer) SendMessageHandler(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageHandler not implemented")
}
func (UnimplementedImMessageServer) mustEmbedUnimplementedImMessageServer() {}

// UnsafeImMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImMessageServer will
// result in compilation errors.
type UnsafeImMessageServer interface {
	mustEmbedUnimplementedImMessageServer()
}

func RegisterImMessageServer(s grpc.ServiceRegistrar, srv ImMessageServer) {
	s.RegisterService(&ImMessage_ServiceDesc, srv)
}

func _ImMessage_SendMessageHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImMessageServer).SendMessageHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImMessage_SendMessageHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImMessageServer).SendMessageHandler(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImMessage_ServiceDesc is the grpc.ServiceDesc for ImMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ImMessage",
	HandlerType: (*ImMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessageHandler",
			Handler:    _ImMessage_SendMessageHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Message.proto",
}
