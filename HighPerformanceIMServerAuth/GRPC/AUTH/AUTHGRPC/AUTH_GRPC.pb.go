// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: AUTH.proto

package AUTHGRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IMAuthService_Login_FullMethodName                 = "/IMAuthService/Login"
	IMAuthService_Register_FullMethodName              = "/IMAuthService/Register"
	IMAuthService_SendEmailCode_FullMethodName         = "/IMAuthService/SendEmailCode"
	IMAuthService_IMAuthenticateHandler_FullMethodName = "/IMAuthService/IMAuthenticateHandler"
)

// IMAuthServiceClient is the client API for IMAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IMAuthServiceClient interface {
	// 登录账号功能
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 注册账号功能
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// 发送验证码功能
	SendEmailCode(ctx context.Context, in *EmailCodeRequest, opts ...grpc.CallOption) (*EmailCodeResponse, error)
	// 鉴权功能
	IMAuthenticateHandler(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type iMAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIMAuthServiceClient(cc grpc.ClientConnInterface) IMAuthServiceClient {
	return &iMAuthServiceClient{cc}
}

func (c *iMAuthServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, IMAuthService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMAuthServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, IMAuthService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMAuthServiceClient) SendEmailCode(ctx context.Context, in *EmailCodeRequest, opts ...grpc.CallOption) (*EmailCodeResponse, error) {
	out := new(EmailCodeResponse)
	err := c.cc.Invoke(ctx, IMAuthService_SendEmailCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMAuthServiceClient) IMAuthenticateHandler(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, IMAuthService_IMAuthenticateHandler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IMAuthServiceServer is the server API for IMAuthService service.
// All implementations must embed UnimplementedIMAuthServiceServer
// for forward compatibility
type IMAuthServiceServer interface {
	// 登录账号功能
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// 注册账号功能
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// 发送验证码功能
	SendEmailCode(context.Context, *EmailCodeRequest) (*EmailCodeResponse, error)
	// 鉴权功能
	IMAuthenticateHandler(context.Context, *AuthRequest) (*AuthResponse, error)
	mustEmbedUnimplementedIMAuthServiceServer()
}

// UnimplementedIMAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIMAuthServiceServer struct {
}

func (UnimplementedIMAuthServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedIMAuthServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedIMAuthServiceServer) SendEmailCode(context.Context, *EmailCodeRequest) (*EmailCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailCode not implemented")
}
func (UnimplementedIMAuthServiceServer) IMAuthenticateHandler(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IMAuthenticateHandler not implemented")
}
func (UnimplementedIMAuthServiceServer) mustEmbedUnimplementedIMAuthServiceServer() {}

// UnsafeIMAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IMAuthServiceServer will
// result in compilation errors.
type UnsafeIMAuthServiceServer interface {
	mustEmbedUnimplementedIMAuthServiceServer()
}

func RegisterIMAuthServiceServer(s grpc.ServiceRegistrar, srv IMAuthServiceServer) {
	s.RegisterService(&IMAuthService_ServiceDesc, srv)
}

func _IMAuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMAuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IMAuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMAuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IMAuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMAuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IMAuthService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMAuthServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IMAuthService_SendEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMAuthServiceServer).SendEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IMAuthService_SendEmailCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMAuthServiceServer).SendEmailCode(ctx, req.(*EmailCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IMAuthService_IMAuthenticateHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMAuthServiceServer).IMAuthenticateHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IMAuthService_IMAuthenticateHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMAuthServiceServer).IMAuthenticateHandler(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IMAuthService_ServiceDesc is the grpc.ServiceDesc for IMAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IMAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IMAuthService",
	HandlerType: (*IMAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _IMAuthService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _IMAuthService_Register_Handler,
		},
		{
			MethodName: "SendEmailCode",
			Handler:    _IMAuthService_SendEmailCode_Handler,
		},
		{
			MethodName: "IMAuthenticateHandler",
			Handler:    _IMAuthService_IMAuthenticateHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "AUTH.proto",
}
